# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату 'y' точки с заданной координатой x.

# задано в виде строки.
string = 'y = -12x + 11111140.2121'
# с заданной координатой x.
x = 2.5

# разбить строку на части по прбелам
split_string = string.split()
# получить k - третий элемент строки
k = float(split_string[2].replace('x', ''))
# получить b - пятый элеиент строки
b = float(split_string[4])

# вычислите и выведите y
y = k * x + b
print(y)

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
# date = '01.11.1985'

# Примеры некорректных дат
# date = '01.22.1001'
# date = '1.12.1001'
# date = '-2.10.3001'

days_in_month = (0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
date = input("Input date: ")
day, month, year = date.split('.')
if len(day) == 2 and len(month) == 2 and len(year) == 4:
    if 0 < int(month) <= 12 \
            and 0 < int(year) <= 9999 \
            and 0 < int(day) <= days_in_month[month]:
        print('Date is correct')
    else:
        print('Date is incorrect')
else:
    print('Date is incorrect')

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#    27 28  29 30
#    23 24  25 26
#    19 20  21 22
#    15 16  17 18
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

# В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
while True:
    N = int(input('Номер искомой комнаты: '))
    if 1 <= N <= 2000000000:
        break
    else:
        print('Input room number in range [1;2 000 000 000]')

# В этой ззадаче главное выявить следующие закономерности:
# 1. Башня состоит из квадратных блоков - выделяем их в переменную block
#    (Блок это единица структуры башни 3-го уровня, поскольку 1-й уровень структуры это комната, 2-й - этаж)
# 2. Блоки имеют квадратную структуру - из этого следует:
#       а) порядковый номер блока (значение переменной block) это количество этажей в блоке
#          (1-й блок имеет 1 этаж, 2-й блок имеет 2 этажа и т.д.)
#       б) порядковый номер блока возведенный в квадрат (block ** 2) это количество комнат в блоке
#          (1-й блок имеет 1 комнату, 2-й блок имеет 4 комнаты, 3-й блок имеет 9 комнат и т.д.)
#       в) номер этажа с которого начинается каждый блок (stage) равен сумме
#          порядковых номеров предыдущих блоков + 1
#          (stage 3-го блока равен 4  - 1 блок + 2 блок + 1), stage 5-го блока 1 + 2 + 3 + 4 + 1 = 11)

# Чтобы найти этаж на котором наша комната, нам необходимо сначала понять в каком блоке наша комната находится.
# Мы имеем номер комнаты (N), который указывает какое количество комнат перед заданной + 1.
# Поскольку мы знаем, что квадрат порядкового номера блока (block ** 2) это количество комнат в нем,
# то мы можем сравнить его с номером искомой комнаты и понять находится ли заданная комната в этом блоке
# Т.е. N >= block ** 2, если да, то наш искомый блок выше, если нет то мы нашли наш номер блока (block).
# Мы начинаем отсчет с первой комнаты в башне (first_room) и добавляем к ней количество комнат в блоке -
# first_room + block ** 2
# если

# N > first_room + block ** 2

# - нам надо сдвинуться на один блок выше т.е.
#
# block + 1

# этаж с которого начинается след. блок

# stage = stage + block

# чтобы сравнивать дальше нам надо учесть количество комнат в предыдущих блоках - это можно найти через сумму:
# первой комнаты + количество комнат в предыдущем блоке

# first_room = first_room + block ** 2
#
#
# Допустим нашли наш блок - block при котором N < first_room + block ** 2


block_number = 1
# номер первой комнаты в текущем блоке
first_room = 1
# номер первого этаже в текущем блоке
stage = 1


while N >= first_room + block_number ** 2:
    # следующая первая комната смещается на блок выше
    first_room += block_number ** 2
    # следующий первый этаж блока смещается на блок выше
    stage += block_number
    # переходим на следущий блок
    block_number += 1
# если N < совокупного количества комнат при текущем блоке, значит мы нашли наш блок - в котором искомый этаж.
# искомый этаж = первый этаж на найденом блоке + (количество комнат от первой комнаты на блоке / на количество этажей
# в блоке)
floor_for_search = stage + (N - first_room) // block_number
room_sequence = int((N - first_room) % block_number + 1)

print(floor_for_search, room_sequence)
